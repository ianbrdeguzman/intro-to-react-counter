{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","reportWebVitals.js","index.js"],"names":["Navbar","totalCounters","console","log","className","href","Counter","prevProps","prevState","this","props","counter","id","onClick","onDecrement","getBadgeClasses","formatCount","onIncrement","onDelete","classes","value","Component","Counters","onReset","counters","Fragment","map","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleDelete","counterId","filter","c","handleReset","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2774b417.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = ({ totalCounters }) => {\r\n    console.log('Navbar - Rendered');\r\n    return (\r\n        <nav className='navbar navbar-light bg-light'>\r\n            <div className='container-fluid'>\r\n                <a className='navbar-brand' href='#'>\r\n                    Navbar{' '}\r\n                    <span className='badge badge-pill badge-secondary'>\r\n                        {totalCounters}\r\n                    </span>\r\n                </a>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log('prevProps', prevProps);\r\n        console.log('prevState', prevState);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log('Counter - Unmount');\r\n    }\r\n    render() {\r\n        console.log('Counter - Rendered');\r\n        return (\r\n            <div>\r\n                <h4>Counter #{this.props.counter.id}</h4>\r\n                <button\r\n                    onClick={() => this.props.onDecrement(this.props.counter)}\r\n                    className='btn btn-secondary btn-sm'\r\n                >\r\n                    Decrement\r\n                </button>\r\n                <span className={this.getBadgeClasses()}>\r\n                    {this.formatCount()}\r\n                </span>\r\n                <button\r\n                    onClick={() => this.props.onIncrement(this.props.counter)}\r\n                    className='btn btn-secondary btn-sm m-2'\r\n                >\r\n                    Increment\r\n                </button>\r\n                <button\r\n                    onClick={() => this.props.onDelete(this.props.counter.id)}\r\n                    className='btn btn-danger btn-sm m-2'\r\n                >\r\n                    Delete\r\n                </button>\r\n                {/* <ul>{this.renderTags()}</ul> */}\r\n            </div>\r\n        );\r\n    }\r\n    getBadgeClasses() {\r\n        let classes = 'badge m-2 badge-';\r\n        if (this.props.counter.value === 0) {\r\n            classes += 'warning';\r\n        } else if (this.props.counter.value > 0) {\r\n            classes += 'primary';\r\n        } else {\r\n            classes += 'danger';\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        const { value } = this.props.counter;\r\n        return value === 0 ? 'Zero' : value;\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from 'react';\r\nimport Counter from './counter.jsx';\r\n\r\nclass Counters extends Component {\r\n    render() {\r\n        console.log('Counters - Rendered');\r\n        const {\r\n            onReset,\r\n            onDelete,\r\n            counters,\r\n            onDecrement,\r\n            onIncrement,\r\n        } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <button\r\n                    onClick={onReset}\r\n                    className='btn btn-primary btn-sm m-2'\r\n                >\r\n                    Reset\r\n                </button>\r\n                {counters.map((counter) => (\r\n                    <Counter\r\n                        key={counter.id}\r\n                        counter={counter}\r\n                        onDelete={onDelete}\r\n                        onDecrement={onDecrement}\r\n                        onIncrement={onIncrement}\r\n                    />\r\n                ))}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from 'react';\nimport Navbar from './components/navbar.jsx';\nimport Counters from './components/counters.jsx';\nimport './App.css';\n\nclass App extends Component {\n    state = {\n        counters: [\n            { id: 1, value: 4 },\n            { id: 2, value: 0 },\n            { id: 3, value: 2 },\n            { id: 4, value: 0 },\n        ],\n    };\n    handleIncrement = (counter) => {\n        const counters = [...this.state.counters];\n        const index = counters.indexOf(counter);\n        counters[index] = { ...counter };\n        counters[index].value++;\n        this.setState({ counters });\n    };\n    handleDecrement = (counter) => {\n        const counters = [...this.state.counters];\n        const index = counters.indexOf(counter);\n        counters[index] = { ...counter };\n        counters[index].value--;\n        if (counters[index].value >= 0) {\n            this.setState({ counters });\n        }\n    };\n    handleDelete = (counterId) => {\n        const counters = this.state.counters.filter((c) => c.id !== counterId);\n        this.setState({ counters });\n    };\n    handleReset = () => {\n        const counters = this.state.counters.map((c) => {\n            c.value = 0;\n            return c;\n        });\n        this.setState({ counters });\n    };\n    constructor() {\n        super();\n        console.log('App - constructor');\n    }\n    componentDidMount() {\n        console.log('App - mounted');\n    }\n    render() {\n        console.log('App - Rendered');\n        return (\n            <React.Fragment>\n                <Navbar\n                    totalCounters={\n                        this.state.counters.filter((c) => c.value > 0).length\n                    }\n                />\n                <main className='container'>\n                    <Counters\n                        counters={this.state.counters}\n                        onDelete={this.handleDelete}\n                        onIncrement={this.handleIncrement}\n                        onDecrement={this.handleDecrement}\n                        onReset={this.handleReset}\n                    />\n                </main>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}